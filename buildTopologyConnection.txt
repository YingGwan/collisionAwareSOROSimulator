void meshOperation::buildTopologyConnection(QMeshPatch* tetMesh, QMeshPatch* body_init, QMeshPatch* chamber_init) {

    for (GLKPOSITION Pos = tetMesh->GetFaceList().GetHeadPosition(); Pos;) {
        QMeshFace* thisFace = (QMeshFace*)tetMesh->GetFaceList().GetNext(Pos);
        thisFace->inner = true;
        if (thisFace->GetLeftTetra() == NULL || thisFace->GetRightTetra() == NULL) {
            thisFace->inner = false;
            for (int i = 0; i < 3; i++) thisFace->GetNodeRecordPtr(i)->isBoundaryNode = true;
        }
    }

    std::vector<QMeshNode*> bodyNodeSet(body_init->GetNodeNumber());
    int index = 0;
    for (GLKPOSITION Pos = body_init->GetNodeList().GetHeadPosition(); Pos;) {
        QMeshNode* Node = (QMeshNode*)body_init->GetNodeList().GetNext(Pos);
        bodyNodeSet[index] = Node; index++;
    }
    #pragma omp parallel   
    {
#pragma omp for 
        for (int i = 0; i < body_init->GetNodeNumber(); i++) {
            Eigen::Vector3d pos;
            bodyNodeSet[i]->GetCoord3D(pos);
            for (GLKPOSITION Pos = tetMesh->GetNodeList().GetHeadPosition(); Pos;) {
                QMeshNode* tetNode = (QMeshNode*)tetMesh->GetNodeList().GetNext(Pos);
                if (tetNode->isBoundaryNode == false) continue;
                else {
                    Eigen::Vector3d pp;
                    tetNode->GetCoord3D(pp);
                    if ((pos - pp).norm() < 0.001) {
                        bodyNodeSet[i]->connectTETNode = tetNode;
                        bodyNodeSet[i]->findConnectTETNode = true;
                        //std::cout << tetNode->GetIndexNo() << "," << Node->GetIndexNo() << std::endl;
                        //std::cout << "connection found" << std::endl;
                        //break;
                    }
                }
            }
            if (!bodyNodeSet[i]->findConnectTETNode) std::cout << "WARNING!!! connected node not found (body)!!!!" << std::endl;
        }
    }

    std::vector<QMeshNode*> chamberNodeSet(chamber_init->GetNodeNumber());
    index = 0;
    for (GLKPOSITION Pos = chamber_init->GetNodeList().GetHeadPosition(); Pos;) {
        QMeshNode* Node = (QMeshNode*)chamber_init->GetNodeList().GetNext(Pos);
        chamberNodeSet[index] = Node; index++;
    }

#pragma omp parallel   
    {
#pragma omp for 
        for (int i = 0; i < chamber_init->GetNodeNumber(); i++) {
            Eigen::Vector3d pos;
            chamberNodeSet[i]->GetCoord3D(pos);
            for (GLKPOSITION Pos = tetMesh->GetNodeList().GetHeadPosition(); Pos;) {
                QMeshNode* tetNode = (QMeshNode*)tetMesh->GetNodeList().GetNext(Pos);
                if (tetNode->isChamberNode == false) continue;
                Eigen::Vector3d pp;
                tetNode->GetCoord3D(pp);
                if ((pos - pp).norm() < 0.001) {
                    chamberNodeSet[i]->connectTETNode = tetNode;
                    chamberNodeSet[i]->findConnectTETNode = true;
                    //std::cout << tetNode->GetIndexNo() << "," << Node->GetIndexNo() << std::endl;
                    //std::cout << "connection found" << std::endl;
                    //break;
                }
            }
            if (!chamberNodeSet[i]->findConnectTETNode) std::cout << "WARNING!!! connected node not found (chamber)!!!!" << std::endl;
        }
    }
}
